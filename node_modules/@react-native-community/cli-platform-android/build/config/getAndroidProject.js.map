{"version":3,"names":["getAndroidProject","config","androidProject","project","android","CLIError","getPackageName","manifestPath","buildGradlePath","androidManifest","fs","readFileSync","packageNameFromManifest","parsePackageNameFromAndroidManifestFile","packageName","buildGradle","namespace","parseNamespaceFromBuildGradleFile","chalk","underline","dim","validatePackageName","logger","warn","bgRed","matchArray","match","length","test"],"sources":["../../src/config/getAndroidProject.ts"],"sourcesContent":["import {Config} from '@react-native-community/cli-types';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport fs from 'fs';\nimport chalk from 'chalk';\n\nexport function getAndroidProject(config: Config) {\n  const androidProject = config.project.android;\n\n  if (!androidProject) {\n    throw new CLIError(`\n      Android project not found. Are you sure this is a React Native project?\n      If your Android files are located in a non-standard location (e.g. not inside 'android' folder), consider setting\n      \\`project.android.sourceDir\\` option to point to a new location.\n    `);\n  }\n  return androidProject;\n}\n\n/**\n * Get the package name/namespace of the running React Native app\n * @param manifestPath The path to the AndroidManifest.xml\n * @param buildGradlePath The path to the build.gradle[.kts] file.\n */\nexport function getPackageName(\n  manifestPath: string,\n  buildGradlePath: string | null,\n) {\n  const androidManifest = fs.readFileSync(manifestPath, 'utf8');\n\n  const packageNameFromManifest = parsePackageNameFromAndroidManifestFile(\n    androidManifest,\n  );\n  let packageName;\n  if (packageNameFromManifest) {\n    // We got the package from the AndroidManifest.xml\n    packageName = packageNameFromManifest;\n  } else if (buildGradlePath) {\n    // We didn't get the package from the AndroidManifest.xml,\n    // so we'll try to get it from the build.gradle[.kts] file\n    // via the namespace field.\n    const buildGradle = fs.readFileSync(buildGradlePath, 'utf8');\n    const namespace = parseNamespaceFromBuildGradleFile(buildGradle);\n    if (namespace) {\n      packageName = namespace;\n    } else {\n      throw new CLIError(\n        `Failed to build the app: No package name found. \n        We couldn't parse the namespace from your build.gradle[.kts] file at ${chalk.underline.dim(\n          `${buildGradlePath}`,\n        )} \n        and nor your package in the AndroidManifest at ${chalk.underline.dim(\n          `${manifestPath}`,\n        )}\n        `,\n      );\n    }\n  } else {\n    throw new CLIError(\n      `Failed to build the app: No package name found. \n      We failed to parse your AndroidManifest at ${chalk.underline.dim(\n        `${manifestPath}`,\n      )}\n      and we couldn't find your build.gradle[.kts] file.\n      `,\n    );\n  }\n\n  if (!validatePackageName(packageName)) {\n    logger.warn(\n      `Invalid application's package name \"${chalk.bgRed(\n        packageName,\n      )}\" in 'AndroidManifest.xml'. Read guidelines for setting the package name here: ${chalk.underline.dim(\n        'https://developer.android.com/studio/build/application-id',\n      )}`,\n    );\n  }\n  return packageName;\n}\n\nexport function parsePackageNameFromAndroidManifestFile(\n  androidManifest: string,\n) {\n  const matchArray = androidManifest.match(/package=\"(.+?)\"/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\n\nexport function parseNamespaceFromBuildGradleFile(buildGradle: string) {\n  // search for namespace = inside the build.gradle file via regex\n  const matchArray = buildGradle.match(/namespace\\s*[=]*\\s*\"(.+?)\"/);\n  if (matchArray && matchArray.length > 0) {\n    return matchArray[1];\n  } else {\n    return null;\n  }\n}\n\n// Validates that the package name is correct\nexport function validatePackageName(packageName: string) {\n  return /^[a-z][a-z0-9_]*(\\.[a-z][a-z0-9_]*)+$/i.test(packageName);\n}\n"],"mappings":";;;;;;;;;;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AACA;EAAA;EAAA;IAAA;EAAA;EAAA;AAAA;AAA0B;AAEnB,SAASA,iBAAiB,CAACC,MAAc,EAAE;EAChD,MAAMC,cAAc,GAAGD,MAAM,CAACE,OAAO,CAACC,OAAO;EAE7C,IAAI,CAACF,cAAc,EAAE;IACnB,MAAM,KAAIG,oBAAQ,EAAE;AACxB;AACA;AACA;AACA,KAAK,CAAC;EACJ;EACA,OAAOH,cAAc;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASI,cAAc,CAC5BC,YAAoB,EACpBC,eAA8B,EAC9B;EACA,MAAMC,eAAe,GAAGC,aAAE,CAACC,YAAY,CAACJ,YAAY,EAAE,MAAM,CAAC;EAE7D,MAAMK,uBAAuB,GAAGC,uCAAuC,CACrEJ,eAAe,CAChB;EACD,IAAIK,WAAW;EACf,IAAIF,uBAAuB,EAAE;IAC3B;IACAE,WAAW,GAAGF,uBAAuB;EACvC,CAAC,MAAM,IAAIJ,eAAe,EAAE;IAC1B;IACA;IACA;IACA,MAAMO,WAAW,GAAGL,aAAE,CAACC,YAAY,CAACH,eAAe,EAAE,MAAM,CAAC;IAC5D,MAAMQ,SAAS,GAAGC,iCAAiC,CAACF,WAAW,CAAC;IAChE,IAAIC,SAAS,EAAE;MACbF,WAAW,GAAGE,SAAS;IACzB,CAAC,MAAM;MACL,MAAM,KAAIX,oBAAQ,EACf;AACT,+EAA+Ea,gBAAK,CAACC,SAAS,CAACC,GAAG,CACvF,GAAEZ,eAAgB,EAAC,CACpB;AACV,yDAAyDU,gBAAK,CAACC,SAAS,CAACC,GAAG,CACjE,GAAEb,YAAa,EAAC,CACjB;AACV,SAAS,CACF;IACH;EACF,CAAC,MAAM;IACL,MAAM,KAAIF,oBAAQ,EACf;AACP,mDAAmDa,gBAAK,CAACC,SAAS,CAACC,GAAG,CAC7D,GAAEb,YAAa,EAAC,CACjB;AACR;AACA,OAAO,CACF;EACH;EAEA,IAAI,CAACc,mBAAmB,CAACP,WAAW,CAAC,EAAE;IACrCQ,kBAAM,CAACC,IAAI,CACR,uCAAsCL,gBAAK,CAACM,KAAK,CAChDV,WAAW,CACX,kFAAiFI,gBAAK,CAACC,SAAS,CAACC,GAAG,CACpG,2DAA2D,CAC3D,EAAC,CACJ;EACH;EACA,OAAON,WAAW;AACpB;AAEO,SAASD,uCAAuC,CACrDJ,eAAuB,EACvB;EACA,MAAMgB,UAAU,GAAGhB,eAAe,CAACiB,KAAK,CAAC,iBAAiB,CAAC;EAC3D,IAAID,UAAU,IAAIA,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACvC,OAAOF,UAAU,CAAC,CAAC,CAAC;EACtB,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF;AAEO,SAASR,iCAAiC,CAACF,WAAmB,EAAE;EACrE;EACA,MAAMU,UAAU,GAAGV,WAAW,CAACW,KAAK,CAAC,4BAA4B,CAAC;EAClE,IAAID,UAAU,IAAIA,UAAU,CAACE,MAAM,GAAG,CAAC,EAAE;IACvC,OAAOF,UAAU,CAAC,CAAC,CAAC;EACtB,CAAC,MAAM;IACL,OAAO,IAAI;EACb;AACF;;AAEA;AACO,SAASJ,mBAAmB,CAACP,WAAmB,EAAE;EACvD,OAAO,wCAAwC,CAACc,IAAI,CAACd,WAAW,CAAC;AACnE"}