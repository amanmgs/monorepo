{"version":3,"names":["runAndroid","_argv","config","args","androidProject","getAndroidProject","runPackager","buildAndRun","defaultPort","getAvailableDevicePort","port","adbPath","getAdbPath","devices","adb","getDevices","CLIError","some","d","includes","toString","process","chdir","sourceDir","cmd","platform","startsWith","listDevices","deviceId","logger","warn","device","listAndroidDevices","connected","runOnSpecificDevice","emulator","info","result","tryLaunchEmulator","readableName","success","chalk","dim","error","runOnAllDevices","length","indexOf","gradleArgs","extraParams","build","installAndLaunchOnDevice","tryInstallAppOnDevice","appName","variant","mode","toLowerCase","buildDirectory","apkFile","getInstallApkName","pathToApk","adbArgs","debug","execa","sync","stdio","availableCPUs","getAvailableCPUs","availableCPU","concat","apkName","fs","existsSync","selectedDevice","tryRunAdbReverse","tryLaunchAppOnDevice","packageName","name","description","func","options","default"],"sources":["../../../src/commands/runAndroid/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\nimport execa from 'execa';\nimport fs from 'fs';\nimport {Config} from '@react-native-community/cli-types';\nimport adb from './adb';\nimport runOnAllDevices from './runOnAllDevices';\nimport tryRunAdbReverse from './tryRunAdbReverse';\nimport tryLaunchAppOnDevice from './tryLaunchAppOnDevice';\nimport getAdbPath from './getAdbPath';\nimport {logger, CLIError} from '@react-native-community/cli-tools';\nimport {getAndroidProject} from '../../config/getAndroidProject';\nimport listAndroidDevices from './listAndroidDevices';\nimport tryLaunchEmulator from './tryLaunchEmulator';\nimport chalk from 'chalk';\nimport {build, runPackager, BuildFlags, options} from '../buildAndroid';\n\nexport interface Flags extends BuildFlags {\n  appId: string;\n  appIdSuffix: string;\n  mainActivity: string;\n  deviceId?: string;\n  listDevices?: boolean;\n}\n\ntype AndroidProject = NonNullable<Config['project']['android']>;\n\n/**\n * Starts the app on a connected Android emulator or device.\n */\nasync function runAndroid(_argv: Array<string>, config: Config, args: Flags) {\n  const androidProject = getAndroidProject(config);\n\n  await runPackager(args, config);\n  return buildAndRun(args, androidProject);\n}\n\nconst defaultPort = 5552;\nasync function getAvailableDevicePort(\n  port: number = defaultPort,\n): Promise<number> {\n  /**\n   * The default value is 5554 for the first virtual device instance running on your machine. A virtual device normally occupies a pair of adjacent ports: a console port and an adb port. The console of the first virtual device running on a particular machine uses console port 5554 and adb port 5555. Subsequent instances use port numbers increasing by two. For example, 5556/5557, 5558/5559, and so on. The range is 5554 to 5682, allowing for 64 concurrent virtual devices.\n   */\n  const adbPath = getAdbPath();\n  const devices = adb.getDevices(adbPath);\n  if (port > 5682) {\n    throw new CLIError('Failed to launch emulator...');\n  }\n  if (devices.some((d) => d.includes(port.toString()))) {\n    return await getAvailableDevicePort(port + 2);\n  }\n  return port;\n}\n\n// Builds the app and runs it on a connected emulator / device.\nasync function buildAndRun(args: Flags, androidProject: AndroidProject) {\n  process.chdir(androidProject.sourceDir);\n  const cmd = process.platform.startsWith('win') ? 'gradlew.bat' : './gradlew';\n\n  const adbPath = getAdbPath();\n  if (args.listDevices) {\n    if (args.deviceId) {\n      logger.warn(\n        'Both \"deviceId\" and \"list-devices\" parameters were passed to \"run\" command. We will list available devices and let you choose from one',\n      );\n    }\n\n    const device = await listAndroidDevices();\n    if (!device) {\n      throw new CLIError(\n        'Failed to select device, please try to run app without \"list-devices\" command.',\n      );\n    }\n\n    if (device.connected) {\n      return runOnSpecificDevice(\n        {...args, deviceId: device.deviceId},\n        adbPath,\n        androidProject,\n      );\n    }\n\n    const port = await getAvailableDevicePort();\n    const emulator = `emulator-${port}`;\n    logger.info('Launching emulator...');\n    const result = await tryLaunchEmulator(adbPath, device.readableName, port);\n    if (result.success) {\n      logger.info('Successfully launched emulator.');\n      return runOnSpecificDevice(\n        {...args, deviceId: emulator},\n        adbPath,\n        androidProject,\n      );\n    }\n    throw new CLIError(\n      `Failed to launch emulator. Reason: ${chalk.dim(result.error || '')}`,\n    );\n  }\n  if (args.deviceId) {\n    return runOnSpecificDevice(args, adbPath, androidProject);\n  } else {\n    return runOnAllDevices(args, cmd, adbPath, androidProject);\n  }\n}\n\nfunction runOnSpecificDevice(\n  args: Flags,\n  adbPath: string,\n  androidProject: AndroidProject,\n) {\n  const devices = adb.getDevices(adbPath);\n  const {deviceId} = args;\n  if (devices.length > 0 && deviceId) {\n    if (devices.indexOf(deviceId) !== -1) {\n      // using '-x lint' in order to ignore linting errors while building the apk\n      let gradleArgs = ['build', '-x', 'lint'];\n      if (args.extraParams) {\n        gradleArgs = [...gradleArgs, ...args.extraParams];\n      }\n      build(gradleArgs, androidProject.sourceDir);\n      installAndLaunchOnDevice(args, deviceId, adbPath, androidProject);\n    } else {\n      logger.error(\n        `Could not find device with the id: \"${deviceId}\". Please choose one of the following:`,\n        ...devices,\n      );\n    }\n  } else {\n    logger.error('No Android device or emulator connected.');\n  }\n}\n\nfunction tryInstallAppOnDevice(\n  args: Flags,\n  adbPath: string,\n  device: string,\n  androidProject: AndroidProject,\n) {\n  try {\n    // \"app\" is usually the default value for Android apps with only 1 app\n    const {appName, sourceDir} = androidProject;\n    const variant = (args.mode || 'debug').toLowerCase();\n    const buildDirectory = `${sourceDir}/${appName}/build/outputs/apk/${variant}`;\n    const apkFile = getInstallApkName(\n      appName,\n      adbPath,\n      variant,\n      device,\n      buildDirectory,\n    );\n\n    const pathToApk = `${buildDirectory}/${apkFile}`;\n    const adbArgs = ['-s', device, 'install', '-r', '-d', pathToApk];\n    logger.info(`Installing the app on the device \"${device}\"...`);\n    logger.debug(\n      `Running command \"cd android && adb -s ${device} install -r -d ${pathToApk}\"`,\n    );\n    execa.sync(adbPath, adbArgs, {stdio: 'inherit'});\n  } catch (error) {\n    throw new CLIError('Failed to install the app on the device.', error);\n  }\n}\n\nfunction getInstallApkName(\n  appName: string,\n  adbPath: string,\n  variant: string,\n  device: string,\n  buildDirectory: string,\n) {\n  const availableCPUs = adb.getAvailableCPUs(adbPath, device);\n\n  // check if there is an apk file like app-armeabi-v7a-debug.apk\n  for (const availableCPU of availableCPUs.concat('universal')) {\n    const apkName = `${appName}-${availableCPU}-${variant}.apk`;\n    if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n      return apkName;\n    }\n  }\n\n  // check if there is a default file like app-debug.apk\n  const apkName = `${appName}-${variant}.apk`;\n  if (fs.existsSync(`${buildDirectory}/${apkName}`)) {\n    return apkName;\n  }\n\n  throw new CLIError('Could not find the correct install APK file.');\n}\n\nfunction installAndLaunchOnDevice(\n  args: Flags,\n  selectedDevice: string,\n  adbPath: string,\n  androidProject: AndroidProject,\n) {\n  tryRunAdbReverse(args.port, selectedDevice);\n  tryInstallAppOnDevice(args, adbPath, selectedDevice, androidProject);\n  tryLaunchAppOnDevice(\n    selectedDevice,\n    androidProject.packageName,\n    adbPath,\n    args,\n  );\n}\n\nexport default {\n  name: 'run-android',\n  description:\n    'builds your app and starts it on a connected Android emulator or device',\n  func: runAndroid,\n  options: [\n    ...options,\n    {\n      name: '--appId <string>',\n      description:\n        'Specify an applicationId to launch after build. If not specified, `package` from AndroidManifest.xml will be used.',\n      default: '',\n    },\n    {\n      name: '--appIdSuffix <string>',\n      description: 'Specify an applicationIdSuffix to launch after build.',\n      default: '',\n    },\n    {\n      name: '--main-activity <string>',\n      description: 'Name of the activity to start',\n      default: 'MainActivity',\n    },\n    {\n      name: '--deviceId <string>',\n      description:\n        'builds your app and starts it on a specific device/simulator with the ' +\n        'given device id (listed by running \"adb devices\" on the command line).',\n    },\n    {\n      name: '--list-devices',\n      description:\n        'Lists all available Android devices and simulators and let you choose one to run the app',\n      default: false,\n    },\n  ],\n};\n"],"mappings":"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"}