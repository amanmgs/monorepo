{"version":3,"names":["runIOS","_","ctx","args","project","ios","CLIError","xcodeProject","sourceDir","process","chdir","inferredSchemeName","path","basename","name","extname","scheme","logger","info","isWorkspace","chalk","bold","device","udid","runOnSimulator","error","devices","out","execa","sync","parseXctraceIOSDevicesList","stderr","stdout","e","warn","parseIOSDevicesList","find","d","printFoundDevices","type","runOnDevice","physicalDevices","filter","matchingDevice","simulators","JSON","parse","child_process","execFileSync","encoding","fallbackSimulators","selectedSimulator","reduce","simulator","fallback","findMatchingSimulator","activeDeveloperDir","trim","booted","bootSimulator","buildOutput","buildProject","appPath","getBuildPath","configuration","spawnSync","stdio","bundleID","join","result","status","success","toString","selectedDevice","isIOSDeployInstalled","appProcess","spawn","detached","unref","iosDeployInstallArgs","iosDeployOutput","message","Promise","resolve","reject","xcodebuildArgs","xcconfig","buildFolder","loader","ora","dim","xcodebuildOutputFormatter","verbose","xcbeautifyAvailable","xcprettyAvailable","buildProcess","getProcessOptions","errorOutput","on","data","stringData","stdin","write","isVerbose","debug","start","repeat","length","code","end","stop","undefined","simulatorFullName","formattedDeviceName","getTargetPaths","buildSettings","settings","i","wrapperExtension","WRAPPER_EXTENSION","targetBuildDir","TARGET_BUILD_DIR","executableFolderPath","EXECUTABLE_FOLDER_PATH","isCatalyst","getPlatformName","platformNameMatch","exec","execSync","deviceName","firstIOSDevice","deviceByName","String","version","map","packager","terminal","port","env","RCT_TERMINAL","RCT_METRO_PORT","RCT_NO_LAUNCH_PACKAGER","description","func","examples","desc","cmd","options","default","Number","getDefaultUserTerminal"],"sources":["../../../src/commands/runIOS/index.ts"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport child_process, {\n  ChildProcess,\n  // @ts-ignore\n  SpawnOptionsWithoutStdio,\n} from 'child_process';\nimport path from 'path';\nimport chalk from 'chalk';\nimport {Config, IOSProjectInfo} from '@react-native-community/cli-types';\nimport parseIOSDevicesList from './parseIOSDevicesList';\nimport parseXctraceIOSDevicesList from './parseXctraceIOSDevicesList';\nimport findMatchingSimulator from './findMatchingSimulator';\nimport {\n  logger,\n  CLIError,\n  getDefaultUserTerminal,\n} from '@react-native-community/cli-tools';\nimport {Device} from '../../types';\nimport ora from 'ora';\nimport execa from 'execa';\n\ntype FlagsT = {\n  simulator?: string;\n  configuration: string;\n  scheme?: string;\n  projectPath: string;\n  device?: string | true;\n  udid?: string;\n  packager: boolean;\n  verbose: boolean;\n  port: number;\n  terminal: string | undefined;\n  xcconfig?: string;\n  buildFolder?: string;\n};\n\nfunction runIOS(_: Array<string>, ctx: Config, args: FlagsT) {\n  if (!ctx.project.ios) {\n    throw new CLIError(\n      'iOS project folder not found. Are you sure this is a React Native project?',\n    );\n  }\n\n  const {xcodeProject, sourceDir} = ctx.project.ios;\n\n  process.chdir(sourceDir);\n\n  if (!xcodeProject) {\n    throw new CLIError(\n      `Could not find Xcode project files in \"${sourceDir}\" folder`,\n    );\n  }\n\n  const inferredSchemeName = path.basename(\n    xcodeProject.name,\n    path.extname(xcodeProject.name),\n  );\n  const scheme = args.scheme || inferredSchemeName;\n\n  logger.info(\n    `Found Xcode ${\n      xcodeProject.isWorkspace ? 'workspace' : 'project'\n    } \"${chalk.bold(xcodeProject.name)}\"`,\n  );\n\n  // No need to load all available devices\n  if (!args.device && !args.udid) {\n    return runOnSimulator(xcodeProject, scheme, args);\n  }\n\n  if (args.device && args.udid) {\n    return logger.error(\n      'The `device` and `udid` options are mutually exclusive.',\n    );\n  }\n\n  let devices;\n  try {\n    const out = execa.sync('xcrun', ['xctrace', 'list', 'devices']);\n    devices = parseXctraceIOSDevicesList(\n      // Xcode 12.5 introduced a change to output the list to stdout instead of stderr\n      out.stderr === '' ? out.stdout : out.stderr,\n    );\n  } catch (e) {\n    logger.warn(\n      'Support for Xcode 11 and older is deprecated. Please upgrade to Xcode 12.',\n    );\n    devices = parseIOSDevicesList(\n      execa.sync('xcrun', ['instruments', '-s']).stdout,\n    );\n  }\n\n  if (args.udid) {\n    const device = devices.find((d) => d.udid === args.udid);\n    if (!device) {\n      return logger.error(\n        `Could not find a device with udid: \"${chalk.bold(\n          args.udid,\n        )}\". ${printFoundDevices(devices)}`,\n      );\n    }\n    if (device.type === 'simulator') {\n      return runOnSimulator(xcodeProject, scheme, args);\n    } else {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  } else {\n    const physicalDevices = devices.filter((d) => d.type !== 'simulator');\n    const device = matchingDevice(physicalDevices, args.device);\n    if (device) {\n      return runOnDevice(device, scheme, xcodeProject, args);\n    }\n  }\n}\n\nasync function runOnSimulator(\n  xcodeProject: IOSProjectInfo,\n  scheme: string,\n  args: FlagsT,\n) {\n  let simulators: {devices: {[index: string]: Array<Device>}};\n  try {\n    simulators = JSON.parse(\n      child_process.execFileSync(\n        'xcrun',\n        ['simctl', 'list', '--json', 'devices'],\n        {encoding: 'utf8'},\n      ),\n    );\n  } catch (error) {\n    throw new CLIError(\n      'Could not get the simulator list from Xcode. Please open Xcode and try running project directly from there to resolve the remaining issues.',\n      error,\n    );\n  }\n\n  /**\n   * If provided simulator does not exist, try simulators in following order\n   * - iPhone 14\n   * - iPhone 13\n   * - iPhone 12\n   * - iPhone 11\n   */\n  const fallbackSimulators = [\n    'iPhone 14',\n    'iPhone 13',\n    'iPhone 12',\n    'iPhone 11',\n  ];\n  const selectedSimulator = fallbackSimulators.reduce((simulator, fallback) => {\n    return (\n      simulator || findMatchingSimulator(simulators, {simulator: fallback})\n    );\n  }, findMatchingSimulator(simulators, args));\n\n  if (!selectedSimulator) {\n    throw new CLIError(\n      `No simulator available with ${\n        args.simulator ? `name \"${args.simulator}\"` : `udid \"${args.udid}\"`\n      }`,\n    );\n  }\n\n  /**\n   * Booting simulator through `xcrun simctl boot` will boot it in the `headless` mode\n   * (running in the background).\n   *\n   * In order for user to see the app and the simulator itself, we have to make sure\n   * that the Simulator.app is running.\n   *\n   * We also pass it `-CurrentDeviceUDID` so that when we launch it for the first time,\n   * it will not boot the \"default\" device, but the one we set. If the app is already running,\n   * this flag has no effect.\n   */\n  const activeDeveloperDir = child_process\n    .execFileSync('xcode-select', ['-p'], {encoding: 'utf8'})\n    .trim();\n\n  child_process.execFileSync('open', [\n    `${activeDeveloperDir}/Applications/Simulator.app`,\n    '--args',\n    '-CurrentDeviceUDID',\n    selectedSimulator.udid,\n  ]);\n\n  if (!selectedSimulator.booted) {\n    bootSimulator(selectedSimulator);\n  }\n\n  const buildOutput = await buildProject(\n    xcodeProject,\n    selectedSimulator.udid,\n    scheme,\n    args,\n  );\n\n  const appPath = getBuildPath(\n    xcodeProject,\n    args.configuration,\n    buildOutput,\n    scheme,\n  );\n\n  logger.info(`Installing \"${chalk.bold(appPath)}\"`);\n\n  child_process.spawnSync(\n    'xcrun',\n    ['simctl', 'install', selectedSimulator.udid, appPath],\n    {stdio: 'inherit'},\n  );\n\n  const bundleID = child_process\n    .execFileSync(\n      '/usr/libexec/PlistBuddy',\n      ['-c', 'Print:CFBundleIdentifier', path.join(appPath, 'Info.plist')],\n      {encoding: 'utf8'},\n    )\n    .trim();\n\n  logger.info(`Launching \"${chalk.bold(bundleID)}\"`);\n\n  const result = child_process.spawnSync('xcrun', [\n    'simctl',\n    'launch',\n    selectedSimulator.udid,\n    bundleID,\n  ]);\n\n  if (result.status === 0) {\n    logger.success('Successfully launched the app on the simulator');\n  } else {\n    logger.error(\n      'Failed to launch the app on simulator',\n      result.stderr.toString(),\n    );\n  }\n}\n\nasync function runOnDevice(\n  selectedDevice: Device,\n  scheme: string,\n  xcodeProject: IOSProjectInfo,\n  args: FlagsT,\n) {\n  const isIOSDeployInstalled = child_process.spawnSync(\n    'ios-deploy',\n    ['--version'],\n    {encoding: 'utf8'},\n  );\n\n  if (isIOSDeployInstalled.error) {\n    throw new CLIError(\n      `Failed to install the app on the device because we couldn't execute the \"ios-deploy\" command. Please install it by running \"${chalk.bold(\n        'npm install -g ios-deploy',\n      )}\" and try again.`,\n    );\n  }\n\n  const buildOutput = await buildProject(\n    xcodeProject,\n    selectedDevice.udid,\n    scheme,\n    args,\n  );\n\n  if (selectedDevice.type === 'catalyst') {\n    const appPath = getBuildPath(\n      xcodeProject,\n      args.configuration,\n      buildOutput,\n      scheme,\n      true,\n    );\n    const appProcess = child_process.spawn(`${appPath}/${scheme}`, [], {\n      detached: true,\n      stdio: 'ignore',\n    });\n    appProcess.unref();\n  } else {\n    const iosDeployInstallArgs = [\n      '--bundle',\n      getBuildPath(xcodeProject, args.configuration, buildOutput, scheme),\n      '--id',\n      selectedDevice.udid,\n      '--justlaunch',\n    ];\n\n    logger.info(`Installing and launching your app on ${selectedDevice.name}`);\n\n    const iosDeployOutput = child_process.spawnSync(\n      'ios-deploy',\n      iosDeployInstallArgs,\n      {encoding: 'utf8'},\n    );\n\n    if (iosDeployOutput.error) {\n      throw new CLIError(\n        `Failed to install the app on the device. We've encountered an error in \"ios-deploy\" command: ${iosDeployOutput.error.message}`,\n      );\n    }\n  }\n\n  return logger.success('Installed the app on the device.');\n}\n\nfunction buildProject(\n  xcodeProject: IOSProjectInfo,\n  udid: string | undefined,\n  scheme: string,\n  args: FlagsT,\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const xcodebuildArgs = [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      ...(args.xcconfig ? ['-xcconfig', args.xcconfig] : []),\n      ...(args.buildFolder ? ['-derivedDataPath', args.buildFolder] : []),\n      '-configuration',\n      args.configuration,\n      '-scheme',\n      scheme,\n      '-destination',\n      `id=${udid}`,\n    ];\n    // @todo use `getLoader` from cli-tools package\n    const loader = ora();\n    logger.info(\n      `Building ${chalk.dim(\n        `(using \"xcodebuild ${xcodebuildArgs.join(' ')}\")`,\n      )}`,\n    );\n    let xcodebuildOutputFormatter: ChildProcess | any;\n    if (!args.verbose) {\n      if (xcbeautifyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcbeautify', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      } else if (xcprettyAvailable()) {\n        xcodebuildOutputFormatter = child_process.spawn('xcpretty', [], {\n          stdio: ['pipe', process.stdout, process.stderr],\n        });\n      }\n    }\n    const buildProcess = child_process.spawn(\n      'xcodebuild',\n      xcodebuildArgs,\n      getProcessOptions(args),\n    );\n    let buildOutput = '';\n    let errorOutput = '';\n    buildProcess.stdout.on('data', (data: Buffer) => {\n      const stringData = data.toString();\n      buildOutput += stringData;\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.write(data);\n      } else {\n        if (logger.isVerbose()) {\n          logger.debug(stringData);\n        } else {\n          loader.start(\n            `Building the app${'.'.repeat(buildOutput.length % 10)}`,\n          );\n        }\n      }\n    });\n    buildProcess.stderr.on('data', (data: Buffer) => {\n      errorOutput += data;\n    });\n    buildProcess.on('close', (code: number) => {\n      if (xcodebuildOutputFormatter) {\n        xcodebuildOutputFormatter.stdin.end();\n      } else {\n        loader.stop();\n      }\n      if (code !== 0) {\n        reject(\n          new CLIError(\n            `\n            Failed to build iOS project.\n\n            We ran \"xcodebuild\" command but it exited with error code ${code}. To debug build\n            logs further, consider building your app with Xcode.app, by opening\n            ${xcodeProject.name}.\n          `,\n            xcodebuildOutputFormatter\n              ? undefined\n              : buildOutput + '\\n' + errorOutput,\n          ),\n        );\n        return;\n      }\n      logger.success('Successfully built the app');\n      resolve(buildOutput);\n    });\n  });\n}\n\nfunction bootSimulator(selectedSimulator: Device) {\n  const simulatorFullName = formattedDeviceName(selectedSimulator);\n  logger.info(`Launching ${simulatorFullName}`);\n\n  child_process.spawnSync('xcrun', ['simctl', 'boot', selectedSimulator.udid]);\n}\n\nfunction getTargetPaths(buildSettings: string) {\n  const settings = JSON.parse(buildSettings);\n\n  // Find app in all building settings - look for WRAPPER_EXTENSION: 'app',\n  for (const i in settings) {\n    const wrapperExtension = settings[i].buildSettings.WRAPPER_EXTENSION;\n\n    if (wrapperExtension === 'app') {\n      return {\n        targetBuildDir: settings[i].buildSettings.TARGET_BUILD_DIR,\n        executableFolderPath: settings[i].buildSettings.EXECUTABLE_FOLDER_PATH,\n      };\n    }\n  }\n\n  return {};\n}\n\nfunction getBuildPath(\n  xcodeProject: IOSProjectInfo,\n  configuration: string,\n  buildOutput: string,\n  scheme: string,\n  isCatalyst: boolean = false,\n) {\n  const buildSettings = child_process.execFileSync(\n    'xcodebuild',\n    [\n      xcodeProject.isWorkspace ? '-workspace' : '-project',\n      xcodeProject.name,\n      '-scheme',\n      scheme,\n      '-sdk',\n      getPlatformName(buildOutput),\n      '-configuration',\n      configuration,\n      '-showBuildSettings',\n      '-json',\n    ],\n    {encoding: 'utf8'},\n  );\n  const {targetBuildDir, executableFolderPath} = getTargetPaths(buildSettings);\n\n  if (!targetBuildDir) {\n    throw new CLIError('Failed to get the target build directory.');\n  }\n\n  if (!executableFolderPath) {\n    throw new CLIError('Failed to get the app name.');\n  }\n\n  return `${targetBuildDir}${\n    isCatalyst ? '-maccatalyst' : ''\n  }/${executableFolderPath}`;\n}\n\nfunction getPlatformName(buildOutput: string) {\n  // Xcode can sometimes escape `=` with a backslash or put the value in quotes\n  const platformNameMatch = /export PLATFORM_NAME\\\\?=\"?(\\w+)\"?$/m.exec(\n    buildOutput,\n  );\n  if (!platformNameMatch) {\n    throw new CLIError(\n      'Couldn\\'t find \"PLATFORM_NAME\" variable in xcodebuild output. Please report this issue and run your project with Xcode instead.',\n    );\n  }\n  return platformNameMatch[1];\n}\n\nfunction xcbeautifyAvailable() {\n  try {\n    child_process.execSync('xcbeautify --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction xcprettyAvailable() {\n  try {\n    child_process.execSync('xcpretty --version', {\n      stdio: [0, 'pipe', 'ignore'],\n    });\n  } catch (error) {\n    return false;\n  }\n  return true;\n}\n\nfunction matchingDevice(\n  devices: Array<Device>,\n  deviceName: string | true | undefined,\n) {\n  if (deviceName === true) {\n    const firstIOSDevice = devices.find((d) => d.type === 'device')!;\n    if (firstIOSDevice) {\n      logger.info(\n        `Using first available device named \"${chalk.bold(\n          firstIOSDevice.name,\n        )}\" due to lack of name supplied.`,\n      );\n      return firstIOSDevice;\n    } else {\n      logger.error('No iOS devices connected.');\n      return undefined;\n    }\n  }\n  const deviceByName = devices.find(\n    (device) =>\n      device.name === deviceName || formattedDeviceName(device) === deviceName,\n  );\n  if (!deviceByName) {\n    logger.error(\n      `Could not find a device named: \"${chalk.bold(\n        String(deviceName),\n      )}\". ${printFoundDevices(devices)}`,\n    );\n  }\n  return deviceByName;\n}\n\nfunction formattedDeviceName(simulator: Device) {\n  return simulator.version\n    ? `${simulator.name} (${simulator.version})`\n    : simulator.name;\n}\n\nfunction printFoundDevices(devices: Array<Device>) {\n  return [\n    'Available devices:',\n    ...devices.map((device) => `  - ${device.name} (${device.udid})`),\n  ].join('\\n');\n}\n\nfunction getProcessOptions({\n  packager,\n  terminal,\n  port,\n}: {\n  packager: boolean;\n  terminal: string | undefined;\n  port: number;\n}): SpawnOptionsWithoutStdio {\n  if (packager) {\n    return {\n      env: {\n        ...process.env,\n        RCT_TERMINAL: terminal,\n        RCT_METRO_PORT: port.toString(),\n      },\n    };\n  }\n\n  return {\n    env: {\n      ...process.env,\n      RCT_TERMINAL: terminal,\n      RCT_NO_LAUNCH_PACKAGER: 'true',\n    },\n  };\n}\n\nexport default {\n  name: 'run-ios',\n  description: 'builds your app and starts it on iOS simulator',\n  func: runIOS,\n  examples: [\n    {\n      desc: 'Run on a different simulator, e.g. iPhone SE (2nd generation)',\n      cmd: 'react-native run-ios --simulator \"iPhone SE (2nd generation)\"',\n    },\n    {\n      desc: \"Run on a connected device, e.g. Max's iPhone\",\n      cmd: 'react-native run-ios --device \"Max\\'s iPhone\"',\n    },\n    {\n      desc: 'Run on the AppleTV simulator',\n      cmd:\n        'react-native run-ios --simulator \"Apple TV\"  --scheme \"helloworld-tvOS\"',\n    },\n  ],\n  options: [\n    {\n      name: '--simulator <string>',\n      description:\n        'Explicitly set simulator to use. Optionally include iOS version between ' +\n        'parenthesis at the end to match an exact version: \"iPhone 6 (10.0)\"',\n      default: 'iPhone 14',\n    },\n    {\n      name: '--configuration <string>',\n      description: 'Explicitly set the scheme configuration to use',\n      default: 'Debug',\n    },\n    {\n      name: '--scheme <string>',\n      description: 'Explicitly set Xcode scheme to use',\n    },\n    {\n      name: '--device [string]',\n      description:\n        'Explicitly set device to use by name.  The value is not required if you have a single device connected.',\n    },\n    {\n      name: '--udid <string>',\n      description: 'Explicitly set device to use by udid',\n    },\n    {\n      name: '--no-packager',\n      description: 'Do not launch packager while building',\n    },\n    {\n      name: '--verbose',\n      description: 'Do not use xcbeautify or xcpretty even if installed',\n    },\n    {\n      name: '--port <number>',\n      default: process.env.RCT_METRO_PORT || 8081,\n      parse: Number,\n    },\n    {\n      name: '--terminal <string>',\n      description:\n        'Launches the Metro Bundler in a new window using the specified terminal path.',\n      default: getDefaultUserTerminal,\n    },\n    {\n      name: '--xcconfig [string]',\n      description: 'Explicitly set xcconfig to use',\n    },\n    {\n      name: '--buildFolder <string>',\n      description:\n        'Location for iOS build artifacts. Corresponds to Xcode\\'s \"-derivedDataPath\".',\n    },\n  ],\n};\n"],"mappings":"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"}